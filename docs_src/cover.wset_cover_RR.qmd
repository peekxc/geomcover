# cover.wset_cover_RR { #geomcover.cover.wset_cover_RR }

`cover.wset_cover_RR(subsets, weights, maxiter='default', sparsity=1.0, seed=None)`

Computes an approximate solution to the weighted set cover problem via randomized rounding.

This function first computes a minimum-cost fractional set cover whose solution lower-bounds the optimal solution, 
then uses randomized rounding to produce a sequence of solutions whose objectives slightly increase this bound, 
continuing until a feasible solution is found. 

If not supplied, maxiter defaults to (2 / sparsity) * log(n). Supplying 'sparsity' values lower than 1 
will result in choosing fewer subsets per iteration, which may result in sparser and/or lower 
weight cover (at the cost of more iterations). 

## Parameters

| Name       | Type      | Description                                                                 | Default     |
|------------|-----------|-----------------------------------------------------------------------------|-------------|
| `subsets`  | ArrayLike | (n x J) sparse matrix of J subsets whose union forms a cover over n points. | _required_  |
| `weights`  | ArrayLike | (J)-length array of subset weights.                                         | _required_  |
| `maxiter`  | int       | number of iterations to repeat the sampling process. See details.           | `'default'` |
| `sparsity` | float     | constant used to emphasize sparsity between (0, 1]. See details.            | `1.0`       |

## Returns

| Type   | Description                                                                                    |
|--------|------------------------------------------------------------------------------------------------|
| tuple  | (s, c) where s is a boolean array indicating which subsets are in the cover and c is its cost. |

## Examples

```{python}
        1 + 1
```